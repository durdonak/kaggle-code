# -*- coding: utf-8 -*-
"""COVID-19

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/#fileId=https%3A//storage.googleapis.com/kaggle-colab-exported-notebooks/covid-19-829c980d-268a-408b-99fe-296d45e64cc6.ipynb%3FX-Goog-Algorithm%3DGOOG4-RSA-SHA256%26X-Goog-Credential%3Dgcp-kaggle-com%2540kaggle-161607.iam.gserviceaccount.com/20241213/auto/storage/goog4_request%26X-Goog-Date%3D20241213T040158Z%26X-Goog-Expires%3D259200%26X-Goog-SignedHeaders%3Dhost%26X-Goog-Signature%3D952541d432fc29ba7053ee7ea7aeed228102fdbd2f2cc2edba07496eb53d3704eb0092a6e08a1c4028fa2e56f5affdb5312929f0a966dcaf6338ef97be2ff418894f02d803bc4e9427097cd4de6e97d992a6b27454a329dd2654d1d67f16940d8311fadb62ef5b2d51b69d203675b2f711052a040a923b2b3e1ac8eae405ac10f490dfc382c694145faa1e62a9c1d58e4edd052645bd20d2be39193f2d07c1a8bc41c5a7cac6e5cf1fb5dc899f86005a9767334d0147b02430b84a86d70e1a2589a822bf6b1c340e4229555f0e856a4b2032b97b0562757426f81850b70b0f60f0d98c31071534dafb11197a9c74be5edd8617e05b7993ae6204c69f6d4a1d69
"""

# IMPORTANT: RUN THIS CELL IN ORDER TO IMPORT YOUR KAGGLE DATA SOURCES,
# THEN FEEL FREE TO DELETE THIS CELL.
# NOTE: THIS NOTEBOOK ENVIRONMENT DIFFERS FROM KAGGLE'S PYTHON
# ENVIRONMENT SO THERE MAY BE MISSING LIBRARIES USED BY YOUR
# NOTEBOOK.
import kagglehub
jcyzag_covid19_lockdown_dates_by_country_path = kagglehub.dataset_download('jcyzag/covid19-lockdown-dates-by-country')
mamarhabtamu_covid_2019_vacination_date_path = kagglehub.dataset_download('mamarhabtamu/covid-2019-vacination-date')
luisheitorribeiro_covid_19_fatalities_data_path = kagglehub.dataset_download('luisheitorribeiro/covid-19-fatalities-data')

print('Data source import complete.')

# This Python 3 environment comes with many helpful analytics libraries installed
# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python
# For example, here's several helpful packages to load

import numpy as np # linear algebra
import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)
import matplotlib.pyplot as plt

# Input data files are available in the read-only "../input/" directory
# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory

import os
for dirname, _, filenames in os.walk('/kaggle/input'):
    for filename in filenames:
        print(os.path.join(dirname, filename))

# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using "Save & Run All"
# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session

"""## The Dataset"""

# Load the dataset to explore its structure and contents
file_path = '/kaggle/input/covid-19-fatalities-data/data_global_data.csv'
data = pd.read_csv(file_path)

# Display the first few rows of the dataset to understand its structure
data.head()

"""The dataset has four columns:

1. **Country**: The name of the country or region.
2. **Date**: The date of the data point, formatted as MM/DD/YY.
3. **Deaths**: The cumulative number of deaths reported up to that date for the specified country.
4. **Daily_deaths**: The number of deaths reported on that specific day.

I will begin the analysis by cleaning and formatting the data, ensuring dates are recognized as such, and then proceed with the analysis.
"""

# Convert the 'date' column to datetime format for proper time-based analysis
data['date'] = pd.to_datetime(data['date'], format='%m/%d/%y')

# Check for missing or inconsistent data
missing_data_summary = data.isnull().sum()

# General statistics of the numerical columns
statistics_summary = data.describe()

# Displaying missing data and statistics summaries
missing_data_summary, statistics_summary

"""### Initial Observations:
1. **Data Completeness**: There are no missing values in the dataset.
2. **Descriptive Statistics**:
   - The **cumulative deaths** range from 0 to over 1 million (1,099,488 deaths).
   - **Daily deaths** range from 0 to 11,447, indicating significant variation, likely corresponding to peak periods during the pandemic.
   - Most daily deaths are relatively low, as suggested by the median of 0 and 75th percentile of 6.
"""

# Aggregate the data globally to observe overall trends
global_data = data.groupby('date').sum(numeric_only=True).reset_index()

# Calculate global cumulative deaths and daily deaths over time
import matplotlib.pyplot as plt

# Plotting cumulative deaths globally
plt.figure(figsize=(10, 6))
plt.plot(global_data['date'], global_data['deaths'], label='Cumulative Deaths')
plt.title('Global Cumulative Deaths Over Time')
plt.xlabel('Date')
plt.ylabel('Cumulative Deaths')
plt.grid(True)
plt.legend()
plt.show()

# Plotting daily deaths globally
plt.figure(figsize=(10, 6))
plt.plot(global_data['date'], global_data['daily_deaths'], label='Daily Deaths', color='orange')
plt.title('Global Daily Deaths Over Time')
plt.xlabel('Date')
plt.ylabel('Daily Deaths')
plt.grid(True)
plt.legend()
plt.show()

"""The global trends reveal the following insights:

1. **Cumulative Deaths**:
   - The curve rises steadily, indicating an increasing toll as the pandemic progresses.
   - Significant inflection points likely correspond to major waves of the pandemic.

2. **Daily Deaths**:
   - Daily death counts show pronounced peaks and troughs, likely corresponding to pandemic waves and seasonal effects.
   - These peaks could also highlight periods when healthcare systems were overwhelmed.
  
Next, I will compare countries to identify regions with the highest impact and analyze their trends over time.more insights!

## Top 10 countries - cumulative deaths
"""

# Identify countries with the highest cumulative deaths at the end of the dataset
latest_date = data['date'].max()
latest_data = data[data['date'] == latest_date]

# Top 10 countries with the highest cumulative deaths
top_countries = latest_data.nlargest(10, 'deaths')[['country', 'deaths', 'daily_deaths']]

# Visualize trends for these top 3 countries over time
top_countries_list = top_countries['country'].head(10)
top_countries_data = data[data['country'].isin(top_countries_list)]

# Plot cumulative deaths for top 3 countries
plt.figure(figsize=(10, 6))
for country in top_countries_list:
    country_data = top_countries_data[top_countries_data['country'] == country]
    plt.plot(country_data['date'], country_data['deaths'], label=country)

plt.title('Cumulative Deaths in Top 10 Countries Over Time')
plt.xlabel('Date')
plt.ylabel('Cumulative Deaths')
plt.legend()
plt.grid(True)
plt.show()

top_countries

"""Here we can see how the **top 10 countries performed the cumulative deaths over time** and see that **US and Brazil** are the ones who have the most number of deaths.

**Cumulative deaths:**
- **US:** 1099488
- **Brazil:** 695236

**Note:** US had **more than a milion deaths**, the number is **36% higher** than the **number 2** on the list.

## Highest Peaks of daily deaths

Analysing the peaks in **daily deaths** and explore their potential causes, I will:

1. **Identify Major Peaks**: Pinpoint the dates and regions where the highest daily death counts occurred.
2. **Examine Global and Regional Trends**: Break down the timing and characteristics of peaks for the most impacted countries.
3. **Contextualize**: Relate these peaks to known pandemic events, policy changes, or healthcare challenges (e.g., waves, new variants, overwhelmed healthcare systems).

Letâ€™s start by identifying and visualizing the peaks
"""

# Identify the top peaks in daily deaths globally
top_global_peaks = global_data.nlargest(5, 'daily_deaths')[['date', 'daily_deaths']]

# Identify peaks for the top 3 countries
peaks_by_country = {}
for country in top_countries_list:
    country_data = data[data['country'] == country]
    peaks_by_country[country] = country_data.nlargest(3, 'daily_deaths')[['date', 'daily_deaths']]

# Compile and display peaks by country
peaks_by_country_df = pd.concat(
    [df.assign(country=country) for country, df in peaks_by_country.items()],
    ignore_index=True
)

# Visualize global daily deaths highlighting peaks
plt.figure(figsize=(12, 6))
plt.plot(global_data['date'], global_data['daily_deaths'], label='Daily Deaths', color='orange')
plt.scatter(top_global_peaks['date'], top_global_peaks['daily_deaths'], color='red', label='Top Peaks')
plt.title('Global Daily Deaths Highlighting Peaks')
plt.xlabel('Date')
plt.ylabel('Daily Deaths')
plt.legend()
plt.grid(True)
plt.show()

top_global_peaks, peaks_by_country

"""I identified and displayed the top global peaks in daily deaths and the major peaks for the most affected countries.

1. **Global Peaks**: The dates of these peaks align with known waves of the pandemic, such as surges from new variants (e.g., Alpha, Delta, Omicron) or periods of healthcare system strain.
2. **Regional Patterns**: The top countries show individual peak patterns, often reflecting the timing and severity of outbreaks in those regions.

## Regional Daily Deaths
"""

# Sample regional mapping for simplicity (can be refined further)
# Assume a pre-defined regional mapping for simplicity in the absence of detailed metadata
region_mapping = {
    'Africa': ['South Africa', 'Egypt', 'Nigeria', 'Ethiopia', 'Kenya'],
    'Asia': ['China', 'India', 'Japan', 'South Korea', 'Afghanistan'],
    'Europe': ['Italy', 'Spain', 'United Kingdom', 'Germany', 'France'],
    'North America': ['United States', 'Canada', 'Mexico'],
    'South America': ['Brazil', 'Argentina', 'Colombia', 'Chile', 'Peru'],
    'Oceania': ['Australia', 'New Zealand']
}

# Map countries to regions
data['region'] = data['country'].apply(
    lambda country: next((region for region, countries in region_mapping.items() if country in countries), 'Other')
)

# Aggregate deaths and daily deaths by region and date
regional_data = data.groupby(['region', 'date']).sum(numeric_only=True).reset_index()

# Plot regional cumulative deaths trends over time
plt.figure(figsize=(12, 8))
for region in regional_data['region'].unique():
    region_data = regional_data[regional_data['region'] == region]
    plt.plot(region_data['date'], region_data['deaths'], label=region)

plt.title('Regional Cumulative Deaths Over Time')
plt.xlabel('Date')
plt.ylabel('Cumulative Deaths')
plt.legend()
plt.grid(True)
plt.show()

# Plot regional daily deaths trends over time
plt.figure(figsize=(12, 8))
for region in regional_data['region'].unique():
    region_data = regional_data[regional_data['region'] == region]
    plt.plot(region_data['date'], region_data['daily_deaths'], label=region)

plt.title('Regional Daily Deaths Over Time')
plt.xlabel('Date')
plt.ylabel('Daily Deaths')
plt.legend()
plt.grid(True)
plt.show()

"""1. **Cumulative Deaths**:
   - North America, Europe, and South America show steep cumulative death curves, highlighting significant impacts during the pandemic.
   - Asia's and Africa's cumulative deaths are relatively lower, though they experienced notable surges during specific periods.

2. **Daily Deaths**:
   - Peaks in daily deaths differ regionally, reflecting the staggered progression of the pandemic across continents.
   - Europe and North America experienced pronounced early waves, while South America showed later and significant surges.

These trends highlight regional differences in the pandemic's timing and severity, likely influenced by factors such as healthcare infrastructure, public health measures, and population demographics.

## Conclusion: Analysis of Death Trends

The analysis of global and regional death trends during the COVID-19 pandemic revealed the following key insights:

---

### **Global Trends**
1. **Cumulative and Daily Deaths**:
   - The global death toll increased steadily over time, with clear surges corresponding to major pandemic waves.
   - Daily deaths showed pronounced peaks, likely due to the emergence of more transmissible or severe variants, overwhelmed healthcare systems, and delays in interventions.

2. **Impact of Vaccination**:
   - Vaccination rollouts coincided with a decline in daily deaths in highly vaccinated countries, particularly after reaching significant coverage levels.

---

### **Regional Trends**
1. **Variations Across Regions**:
   - North America, Europe, and South America bore the brunt of the pandemic, with steep curves in cumulative deaths.
   - Asia and Africa, though affected, showed lower cumulative deaths, possibly due to demographic differences, public health responses, or underreporting.

2. **Lockdowns and Healthcare Capacity**:
   - Regions that implemented timely and stringent measures (lockdowns, mask mandates, etc.) saw varying success, influenced by population compliance, healthcare infrastructure, and socioeconomic factors.

---

### **Key Patterns**
1. **Timing of Peaks**:
   - Peaks in deaths often lagged behind peaks in cases, reflecting the disease's progression and the impact of strained healthcare systems.
   
2. **Correlation with Interventions**:
   - Countries that implemented strict public health measures earlier in the pandemic generally experienced lower and more controlled peaks.

---

### **Challenges and Considerations**
1. **Data Disparities**:
   - Variability in reporting standards, healthcare access, and testing capacities likely contributed to underreporting or inconsistencies, especially in low-resource regions.

2. **Variants**:
   - The emergence of variants (Delta, Omicron) led to new surges, underliniific aspect or assistance with the next dataset?
"""